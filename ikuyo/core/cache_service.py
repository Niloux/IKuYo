#!/usr/bin/env python3
"""
ÁºìÂ≠òÊúçÂä°Ê®°Âùó
Êèê‰æõÂ§öÂ±ÇÁºìÂ≠òÊú∫Âà∂ÔºöÂÜÖÂ≠òÁºìÂ≠ò + Êñá‰ª∂ÁºìÂ≠ò
Âü∫‰∫écachetoolsÂÆûÁé∞È´òÊÄßËÉΩTTLÁºìÂ≠ò
"""

import json
import os
import threading
import time
from typing import Any, Dict, Optional

from cachetools import TTLCache

from .config import load_config


class CacheManager:
    """
    Â§öÂ±ÇÁºìÂ≠òÁÆ°ÁêÜÂô®
    - L1ÁºìÂ≠òÔºöcachetoolsÂÜÖÂ≠òÁºìÂ≠òÔºà‰∏ªË¶ÅÔºâ
    - L2ÁºìÂ≠òÔºöÈÄâÊã©ÊÄßÊñá‰ª∂Â§á‰ªΩÔºàÈáçË¶ÅÊï∞ÊçÆÔºâ
    - Êô∫ËÉΩÁÆ°ÁêÜÔºöËá™Âä®TTLËøáÊúü
    """

    def __init__(self, cache_dir: str = "data/cache"):
        self.cache_dir = cache_dir
        self.config = load_config()
        self.cache_config = getattr(self.config, "cache", {})

        # Á°Æ‰øùÁºìÂ≠òÁõÆÂΩïÂ≠òÂú®
        os.makedirs(cache_dir, exist_ok=True)

        # ‰ªéÈÖçÁΩÆÂä†ËΩΩTTLÂíåÂÜÖÂ≠òÈôêÂà∂
        self.cache_ttl = getattr(
            self.cache_config,
            "ttl",
            {
                "calendar": 14400,
                "subject": 7200,
                "episodes": 3600,
                "default": 1800,
            },
        )

        self.memory_limits = getattr(
            self.cache_config,
            "memory_limits",
            {
                "calendar": 10,
                "subject": 1000,
                "episodes": 500,
                "default": 100,
            },
        )

        self.persist_types = getattr(
            self.cache_config, "persist_types", ["calendar", "subject", "episodes"]
        )
        self.cleanup_on_startup = getattr(self.cache_config, "cleanup_on_startup", True)

        # ÂàùÂßãÂåñcachetoolsÁºìÂ≠òÊ±†
        self.memory_caches: Dict[str, TTLCache] = {}
        self.lock = threading.RLock()

        self._init_caches()

        # ÂêØÂä®Êó∂Ê∏ÖÁêÜ
        if self.cleanup_on_startup:
            self._cleanup_expired_files()

    def _init_caches(self) -> None:
        """ÂàùÂßãÂåñÂêÑÁ±ªÂûãÁöÑÁºìÂ≠òÊ±†"""
        for cache_type in ["calendar", "subject", "episodes", "default"]:
            ttl = self.cache_ttl.get(cache_type, self.cache_ttl["default"])
            maxsize = self.memory_limits.get(cache_type, self.memory_limits["default"])

            self.memory_caches[cache_type] = TTLCache(maxsize=maxsize, ttl=ttl)

    def _cleanup_expired_files(self) -> None:
        """Ê∏ÖÁêÜÂêØÂä®Êó∂ÁöÑËøáÊúüÊñá‰ª∂"""
        try:
            if not os.path.exists(self.cache_dir):
                return

            current_time = time.time()
            for filename in os.listdir(self.cache_dir):
                if not filename.endswith(".json"):
                    continue

                filepath = os.path.join(self.cache_dir, filename)
                try:
                    with open(filepath, "r", encoding="utf-8") as f:
                        cache_data = json.load(f)

                    if "timestamp" not in cache_data or "cache_type" not in cache_data:
                        continue

                    cache_type = cache_data["cache_type"]
                    ttl = self.cache_ttl.get(cache_type, self.cache_ttl["default"])

                    if current_time - cache_data["timestamp"] > ttl:
                        os.remove(filepath)
                        print(f"üóëÔ∏è Ê∏ÖÁêÜËøáÊúüÁºìÂ≠òÊñá‰ª∂: {filename}")

                except Exception:
                    # Âà†Èô§ÊçüÂùèÁöÑÊñá‰ª∂
                    try:
                        os.remove(filepath)
                        print(f"üóëÔ∏è Ê∏ÖÁêÜÊçüÂùèÁºìÂ≠òÊñá‰ª∂: {filename}")
                    except Exception:
                        pass

        except Exception as e:
            print(f"Ê∏ÖÁêÜÁºìÂ≠òÊñá‰ª∂Êó∂Âá∫Èîô: {e}")

    def _get_cache_file(self, key: str) -> str:
        """Ëé∑ÂèñÁºìÂ≠òÊñá‰ª∂Ë∑ØÂæÑ"""
        return os.path.join(self.cache_dir, f"{key}.json")

    def _should_persist(self, cache_type: str) -> bool:
        """Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊåÅ‰πÖÂåñ"""
        return cache_type in self.persist_types

    def _load_from_file(self, key: str, cache_type: str) -> Optional[Any]:
        """‰ªéÊñá‰ª∂Âä†ËΩΩÁºìÂ≠òÊï∞ÊçÆ"""
        if not self._should_persist(cache_type):
            return None

        cache_file = self._get_cache_file(key)
        if not os.path.exists(cache_file):
            return None

        try:
            with open(cache_file, "r", encoding="utf-8") as f:
                cache_data = json.load(f)

            # Ê£ÄÊü•Êñá‰ª∂ÁºìÂ≠òÊòØÂê¶ËøáÊúü
            if "timestamp" not in cache_data:
                return None

            ttl = self.cache_ttl.get(cache_type, self.cache_ttl["default"])
            if time.time() - cache_data["timestamp"] > ttl:
                # Êñá‰ª∂ÁºìÂ≠òËøáÊúüÔºåÂà†Èô§
                os.remove(cache_file)
                return None

            return cache_data.get("data")

        except Exception as e:
            print(f"ËØªÂèñÁºìÂ≠òÊñá‰ª∂Â§±Ë¥• {cache_file}: {e}")
            try:
                os.remove(cache_file)
            except Exception:
                pass
            return None

    def _save_to_file(self, key: str, data: Any, cache_type: str) -> None:
        """‰øùÂ≠òÊï∞ÊçÆÂà∞Êñá‰ª∂"""
        if not self._should_persist(cache_type):
            return

        cache_file = self._get_cache_file(key)
        cache_data = {"data": data, "timestamp": time.time(), "cache_type": cache_type}

        try:
            with open(cache_file, "w", encoding="utf-8") as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"ÂÜôÂÖ•ÁºìÂ≠òÊñá‰ª∂Â§±Ë¥• {cache_file}: {e}")

    def get(self, key: str, cache_type: str = "default") -> Optional[Any]:
        """
        Ëé∑ÂèñÁºìÂ≠òÊï∞ÊçÆ
        ‰ºòÂÖà‰ªéÂÜÖÂ≠òÁºìÂ≠òËé∑ÂèñÔºåÂÖ∂Ê¨°Êñá‰ª∂ÁºìÂ≠ò
        """
        with self.lock:
            # 1. Â∞ùËØï‰ªéÂÜÖÂ≠òÁºìÂ≠òËé∑Âèñ
            cache = self.memory_caches.get(cache_type, self.memory_caches["default"])

            if key in cache:
                return cache[key]

            # 2. Â∞ùËØï‰ªéÊñá‰ª∂ÁºìÂ≠òÂä†ËΩΩ
            file_data = self._load_from_file(key, cache_type)
            if file_data is not None:
                # Âä†ËΩΩÂà∞ÂÜÖÂ≠òÁºìÂ≠ò
                cache[key] = file_data
                return file_data

            return None

    def set(self, key: str, data: Any, cache_type: str = "default") -> None:
        """
        ËÆæÁΩÆÁºìÂ≠òÊï∞ÊçÆ
        ÂêåÊó∂ÂÜôÂÖ•ÂÜÖÂ≠òÂíåÊñá‰ª∂ÔºàÂ¶ÇÊûúÈúÄË¶ÅÊåÅ‰πÖÂåñÔºâ
        """
        with self.lock:
            # 1. ÂÜôÂÖ•ÂÜÖÂ≠òÁºìÂ≠ò
            cache = self.memory_caches.get(cache_type, self.memory_caches["default"])
            cache[key] = data

            # 2. ÂÜôÂÖ•Êñá‰ª∂ÁºìÂ≠òÔºàÂ¶ÇÊûúÈúÄË¶ÅÊåÅ‰πÖÂåñÔºâ
            self._save_to_file(key, data, cache_type)

    def clear(self, key: Optional[str] = None) -> None:
        """
        Ê∏ÖÁêÜÁºìÂ≠ò
        Â¶ÇÊûúÊåáÂÆökeyÂàôÂè™Ê∏ÖÁêÜÁâπÂÆöÁºìÂ≠òÔºåÂê¶ÂàôÊ∏ÖÁêÜÂÖ®ÈÉ®
        """
        with self.lock:
            if key:
                # Ê∏ÖÁêÜÁâπÂÆöÁºìÂ≠ò
                for cache in self.memory_caches.values():
                    cache.pop(key, None)

                # Ê∏ÖÁêÜÊñá‰ª∂ÁºìÂ≠ò
                cache_file = self._get_cache_file(key)
                if os.path.exists(cache_file):
                    try:
                        os.remove(cache_file)
                    except Exception as e:
                        print(f"Âà†Èô§ÁºìÂ≠òÊñá‰ª∂Â§±Ë¥• {cache_file}: {e}")
            else:
                # Ê∏ÖÁêÜÂÖ®ÈÉ®ÁºìÂ≠ò
                for cache in self.memory_caches.values():
                    cache.clear()

                # Ê∏ÖÁêÜÊñá‰ª∂ÁºìÂ≠ò
                try:
                    for filename in os.listdir(self.cache_dir):
                        if filename.endswith(".json"):
                            os.remove(os.path.join(self.cache_dir, filename))
                except Exception as e:
                    print(f"Ê∏ÖÁêÜÁºìÂ≠òÁõÆÂΩïÂ§±Ë¥•: {e}")

    def get_cache_info(self) -> Dict[str, Any]:
        """Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ"""
        with self.lock:
            memory_stats = {}
            total_memory_count = 0

            for cache_type, cache in self.memory_caches.items():
                count = len(cache)
                memory_stats[cache_type] = {
                    "count": count,
                    "maxsize": cache.maxsize,
                    "ttl": cache.ttl,
                }
                total_memory_count += count

            file_count = 0
            try:
                file_count = len([f for f in os.listdir(self.cache_dir) if f.endswith(".json")])
            except Exception:
                pass

            return {
                "memory_cache_stats": memory_stats,
                "total_memory_count": total_memory_count,
                "file_cache_count": file_count,
                "cache_config": {
                    "ttl": self.cache_ttl,
                    "memory_limits": self.memory_limits,
                    "persist_types": self.persist_types,
                },
            }
